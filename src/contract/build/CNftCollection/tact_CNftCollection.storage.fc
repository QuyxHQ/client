;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

((int, slice, int, slice)) $Context$_tensor_cast((int, slice, int, slice) v) asm "NOP";

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: CollectionData
;; TLB: _ next_item_index:int257 collection_content:^cell owner_address:address = CollectionData
;;

(int, cell, slice) $CollectionData$_to_external(((int, cell, slice)) v) inline {
    var (v'next_item_index, v'collection_content, v'owner_address) = v; 
    return (v'next_item_index, v'collection_content, v'owner_address);
}

((int, cell, slice)) $CollectionData$_constructor_next_item_index_collection_content_owner_address(int next_item_index, cell collection_content, slice owner_address) inline {
    return (next_item_index, collection_content, owner_address);
}

;;
;; Type: GetCardLinkStatus
;; Header: 0xb47e1ddb
;; TLB: get_card_link_status#b47e1ddb query_id:uint64 item_index:int257 initiator:address payload:^cell = GetCardLinkStatus
;;

builder $GetCardLinkStatus$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'query_id, v'item_index, v'initiator, v'payload) = v;
    build_0 = store_uint(build_0, 3028164059, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_int(v'item_index, 257);
    build_0 = __tact_store_address(build_0, v'initiator);
    build_0 = build_0.store_ref(v'payload);
    return build_0;
}

cell $GetCardLinkStatus$_store_cell((int, int, slice, cell) v) inline {
    return $GetCardLinkStatus$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell)) $GetCardLinkStatus$_constructor_query_id_item_index_initiator_payload(int query_id, int item_index, slice initiator, cell payload) inline {
    return (query_id, item_index, initiator, payload);
}

;;
;; Type: ReportCardLinkStatus
;; Header: 0x6227bd3a
;; TLB: report_card_link_status#6227bd3a query_id:uint64 item_index:int257 is_linked_to_card:Maybe bool initiator:address payload:^cell = ReportCardLinkStatus
;;

(slice, ((int, int, int, slice, cell))) $ReportCardLinkStatus$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1646771514);
    var v'query_id = sc_0~load_uint(64);
    var v'item_index = sc_0~load_int(257);
    var v'is_linked_to_card = sc_0~load_int(1) ? sc_0~load_int(1) : null();
    var v'initiator = sc_0~__tact_load_address();
    var v'payload = sc_0~load_ref();
    return (sc_0, (v'query_id, v'item_index, v'is_linked_to_card, v'initiator, v'payload));
}

;;
;; Type: GetUsernameData
;; Header: 0x3030429e
;; TLB: get_username_data#3030429e query_id:uint64 initiator:address payload:^cell = GetUsernameData
;;

builder $GetUsernameData$_store(builder build_0, (int, slice, cell) v) inline {
    var (v'query_id, v'initiator, v'payload) = v;
    build_0 = store_uint(build_0, 808469150, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'initiator);
    build_0 = build_0.store_ref(v'payload);
    return build_0;
}

cell $GetUsernameData$_store_cell((int, slice, cell) v) inline {
    return $GetUsernameData$_store(begin_cell(), v).end_cell();
}

((int, slice, cell)) $GetUsernameData$_constructor_query_id_initiator_payload(int query_id, slice initiator, cell payload) inline {
    return (query_id, initiator, payload);
}

;;
;; Type: ReportUsernameData
;; Header: 0x48ffb6ab
;; TLB: report_username_data#48ffb6ab query_id:uint64 item_index:uint256 token_name:^cell initiator:address payload:^cell = ReportUsernameData
;;

(slice, ((int, int, cell, slice, cell))) $ReportUsernameData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1224717995);
    var v'query_id = sc_0~load_uint(64);
    var v'item_index = sc_0~load_uint(256);
    var v'token_name = sc_0~load_ref();
    var v'initiator = sc_0~__tact_load_address();
    var v'payload = sc_0~load_ref();
    return (sc_0, (v'query_id, v'item_index, v'token_name, v'initiator, v'payload));
}

;;
;; Type: UnlinkCard
;; Header: 0x4ee94867
;; TLB: unlink_card#4ee94867 query_id:uint64 index:int257 initiator:address = UnlinkCard
;;

(slice, ((int, int, slice))) $UnlinkCard$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1323911271);
    var v'query_id = sc_0~load_uint(64);
    var v'index = sc_0~load_int(257);
    var v'initiator = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'index, v'initiator));
}

;;
;; Type: UpdateUsernameLinkedStatus
;; Header: 0xcf6807da
;; TLB: update_username_linked_status#cf6807da query_id:uint64 index:int257 initiator:address status:bool = UpdateUsernameLinkedStatus
;;

builder $UpdateUsernameLinkedStatus$_store(builder build_0, (int, int, slice, int) v) inline {
    var (v'query_id, v'index, v'initiator, v'status) = v;
    build_0 = store_uint(build_0, 3479701466, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_int(v'index, 257);
    build_0 = __tact_store_address(build_0, v'initiator);
    build_0 = build_0.store_int(v'status, 1);
    return build_0;
}

cell $UpdateUsernameLinkedStatus$_store_cell((int, int, slice, int) v) inline {
    return $UpdateUsernameLinkedStatus$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int)) $UpdateUsernameLinkedStatus$_constructor_query_id_initiator_index_status(int query_id, slice initiator, int index, int status) inline {
    return (query_id, index, initiator, status);
}

;;
;; Type: UpdateAllowedContract
;; Header: 0xbc6af03f
;; TLB: update_allowed_contract#bc6af03f allowed_contract:address = UpdateAllowedContract
;;

(slice, ((slice))) $UpdateAllowedContract$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3161124927);
    var v'allowed_contract = sc_0~__tact_load_address();
    return (sc_0, (v'allowed_contract));
}

;;
;; Type: MintCard
;; Header: 0x19616745
;; TLB: mint_card#19616745 query_id:uint64 username_address:address bio:^string pfp:^string = MintCard
;;

(slice, ((int, slice, slice, slice))) $MintCard$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 425813829);
    var v'query_id = sc_0~load_uint(64);
    var v'username_address = sc_0~__tact_load_address();
    var v'bio = sc_0~load_ref().begin_parse();
    var v'pfp = sc_0~load_ref().begin_parse();
    return (sc_0, (v'query_id, v'username_address, v'bio, v'pfp));
}

;;
;; Type: Initialize
;; Header: 0xd4af7495
;; TLB: initialize#d4af7495 query_id:uint64 new_owner:address response_destination:address authority:address payload:^cell = Initialize
;;

builder $Initialize$_store(builder build_0, (int, slice, slice, slice, cell) v) inline {
    var (v'query_id, v'new_owner, v'response_destination, v'authority, v'payload) = v;
    build_0 = store_uint(build_0, 3568268437, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'new_owner);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = __tact_store_address(build_0, v'authority);
    build_0 = build_0.store_ref(v'payload);
    return build_0;
}

cell $Initialize$_store_cell((int, slice, slice, slice, cell) v) inline {
    return $Initialize$_store(begin_cell(), v).end_cell();
}

((int, slice, slice, slice, cell)) $Initialize$_constructor_query_id_new_owner_response_destination_authority_payload(int query_id, slice new_owner, slice response_destination, slice authority, cell payload) inline {
    return (query_id, new_owner, response_destination, authority, payload);
}

;;
;; Type: CNftItem
;;

builder $CNftItem$init$_store(builder build_0, (slice, slice, int, cell) v) inline {
    var (v'collection_address, v'owner, v'index, v'individual_content) = v;
    build_0 = __tact_store_address(build_0, v'collection_address);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'index, 257);
    build_0 = build_0.store_ref(v'individual_content);
    return build_0;
}

(cell, cell) $CNftItem$_init_child(cell sys', slice $collection_address, slice $owner, int $index, cell $individual_content) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: CNftItem
    cell mine = __tact_dict_get_code(source, 18255);
    contracts = __tact_dict_set_code(contracts, 18255, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $CNftItem$init$_store(b, ($collection_address, $owner, $index, $individual_content));
    return (mine, b.end_cell());
}

;;
;; Type: CNftCollection
;;

builder $CNftCollection$_store(builder build_0, (slice, int, slice, slice) v) inline {
    var (v'owner, v'next_item_index, v'collection_uri, v'allowed_contract) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'next_item_index, 32);
    build_0 = build_0.store_ref(begin_cell().store_slice(v'collection_uri).end_cell());
    build_0 = __tact_store_address_opt(build_0, v'allowed_contract);
    return build_0;
}

(slice, ((slice, int, slice, slice))) $CNftCollection$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'next_item_index = sc_0~load_uint(32);
    var v'collection_uri = sc_0~load_ref().begin_parse();
    var v'allowed_contract = sc_0~__tact_load_address_opt();
    return (sc_0, (v'owner, v'next_item_index, v'collection_uri, v'allowed_contract));
}

(slice, ((slice))) $CNftCollection$init$_load(slice sc_0) inline {
    var v'collection_uri = sc_0~load_ref().begin_parse();
    return (sc_0, (v'collection_uri));
}

(slice, int, slice, slice) $CNftCollection$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$CNftCollection$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice collection_uri) = $sc~$CNftCollection$init$_load();
        $sc.end_parse();
        return $CNftCollection$_contract_init(collection_uri);
    }
}

() $CNftCollection$_contract_store((slice, int, slice, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $CNftCollection$_store(b, v);
    set_data(b.end_cell());
}