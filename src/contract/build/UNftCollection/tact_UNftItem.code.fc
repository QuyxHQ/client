#pragma version =0.4.3;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_UNftItem.headers.fc";
#include "tact_UNftItem.stdlib.fc";
#include "tact_UNftItem.native.fc";
#include "tact_UNftItem.constants.fc";
#include "tact_UNftItem.storage.fc";

;;
;; Contract UNftItem functions
;;

(slice, int, slice, cell, int, cell, (int, int, slice)) $UNftItem$_contract_init(slice $collection_address, slice $owner, int $index, cell $individual_content, (int, int, slice) $royalty) impure inline_ref {
    var (($royalty'numerator, $royalty'denominator, $royalty'destination)) = $royalty;
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = (null(), null(), null(), null(), false, null(), null());
    $self'collection_address = $collection_address;
    $self'owner = $owner;
    $self'index = $index;
    $self'individual_content = $individual_content;
    ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination) = ($royalty'numerator, $royalty'denominator, $royalty'destination);
    $self'token_name = $global_emptyCell();
    return ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination));
}

((slice, int, slice, cell, int, cell, (int, int, slice)), ()) $UNftItem$_fun_mint((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, int, slice) $ctx, (int, slice, slice, cell, int, slice) $msg) impure inline {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id, $msg'new_owner, $msg'response_destination, $msg'custom_payload, $msg'forward_amount, $msg'forward_payload)) = $msg;
    throw_unless(401, ( __tact_slice_eq_bits($self'collection_address, $ctx'sender) ));
    $self'is_initialized = true;
    $self'owner = $msg'new_owner;
    $self'token_name = __tact_not_null($msg'custom_payload);
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, 0, (2 + 64), $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

((slice, int, slice, cell, int, cell, (int, int, slice)), ()) $UNftItem$_fun_transfer((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, int, slice) $ctx, int $query_id, cell $payload, int $remain) impure inline {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    slice $payloadSlice = begin_parse($payload);
    slice $new_owner = $payloadSlice~__tact_load_address();
    slice $response_destination = $payloadSlice~__tact_load_address();
    cell $custom_payload = $payloadSlice~load_ref();
    int $forward_amount = $payloadSlice~load_coins();
    slice $forward_payload = begin_parse($payloadSlice~load_ref());
    $self'owner = $new_owner;
    if (($forward_amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($new_owner, $forward_amount, 2, false, $OwnershipAssigned$_store_cell($OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload($query_id, $ctx'sender, $forward_payload))));
    }
    $remain = ($remain - $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
    if (( (( ~ __tact_slice_eq_bits(__tact_create_address(0, 0), $response_destination) )) ? (($remain > $forward_amount)) : (false) )) {
        $global_send($SendParameters$_constructor_to_value_mode_body($response_destination, ($remain - $forward_amount), 1, $Excesses$_store_cell($Excesses$_constructor_query_id($query_id))));
    }
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

((slice, int, slice, cell, int, cell, (int, int, slice)), ()) $UNftItem$_fun_reportStaticData((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, int, slice) $ctx, (int) $msg) impure inline {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    var (($msg'query_id)) = $msg;
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, 64, false, $ReportStaticData$_store_cell($ReportStaticData$_constructor_query_id_index_collection($msg'query_id, $self'index, $self'collection_address))));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

((slice, int, slice, cell, int, cell, (int, int, slice)), (int, int, slice, slice, cell)) $UNftItem$_fun_getNFTData((slice, int, slice, cell, int, cell, (int, int, slice)) $self) impure inline {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    tuple $builder = __tact_string_builder_start_string();
    slice $collection_uri = __tact_slice_to_str($Cell$_fun_asSlice($self'individual_content));
    $builder~__tact_string_builder_append($collection_uri);
    $builder~__tact_string_builder_append(__gen_slice_string_f27cb79e14c9467b3b5f8c977740f36959118da072f63bbaeaa7a03d874f734d());
    $builder~__tact_string_builder_append(__tact_int_to_string($self'index));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), $ItemData$_constructor_is_initialized_index_collection_address_owner_address_individual_content($self'is_initialized, $self'index, $self'collection_address, $self'owner, __tact_string_builder_end($builder)));
}

((slice, int, slice, cell, int, cell, (int, int, slice)), (int, int, slice, slice, cell)) $UNftItem$_fun_get_nft_data((slice, int, slice, cell, int, cell, (int, int, slice)) $self) impure inline_ref {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_getNFTData());
}

((slice, int, slice, cell, int, cell, (int, int, slice)), cell) $UNftItem$_fun_get_token_name((slice, int, slice, cell, int, cell, (int, int, slice)) $self) impure inline_ref {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), $self'token_name);
}

((slice, int, slice, cell, int, cell, (int, int, slice)), (int, int, slice)) $UNftItem$_fun_royalty_params((slice, int, slice, cell, int, cell, (int, int, slice)) $self) impure inline_ref {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination));
}

((slice, int, slice, cell, int, cell, (int, int, slice)), int) $UNftItem$_fun_estimateRestValue((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, int, slice) $ctx) impure inline_ref {
    var (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))) = $self;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    int $rest_value = $ctx'value;
    int $balance_before = (__tact_my_balance() - $rest_value);
    int $storage_fee = (50000000 - min($balance_before, 50000000));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ($rest_value - ($storage_fee + 50000000)));
}

;;
;; Receivers of a Contract UNftItem
;;

(((slice, int, slice, cell, int, cell, (int, int, slice))), ()) %$UNftItem$_internal_empty((slice, int, slice, cell, int, cell, (int, int, slice)) $self) impure inline {
    var ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)) = $self;
    throw(0);
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

(((slice, int, slice, cell, int, cell, (int, int, slice))), ()) $UNftItem$_internal_binary_GetStaticData((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int) $msg) impure inline {
    var ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)) = $self;
    var ($msg'query_id) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_reportStaticData(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

(((slice, int, slice, cell, int, cell, (int, int, slice))), ()) $UNftItem$_internal_binary_GetUsernameData((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, cell) $msg) impure inline {
    var ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)) = $self;
    var ($msg'query_id, $msg'initiator, $msg'payload) = $msg;
    throw_unless(401, ( __tact_slice_eq_bits($self'owner, $msg'initiator) ));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($ctx'sender, 0, (2 + 64), false, $ReportUsernameData$_store_cell($ReportUsernameData$_constructor_query_id_item_index_token_name_initiator_payload($msg'query_id, $self'index, $self'token_name, $msg'initiator, $msg'payload))));
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

(((slice, int, slice, cell, int, cell, (int, int, slice))), ()) $UNftItem$_internal_binary_Transfer((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)) = $self;
    var ($msg'query_id, $msg'new_owner, $msg'response_destination, $msg'custom_payload, $msg'forward_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(401, ( (( __tact_slice_eq_bits($self'owner, $ctx'sender) )) ? (true) : (( __tact_slice_eq_bits($self'collection_address, $ctx'sender) )) ));
    if ((~ $self'is_initialized)) {
        ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_mint(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), ($msg'query_id, $msg'new_owner, $msg'response_destination, $msg'custom_payload, $msg'forward_amount, $msg'forward_payload));
    } else {
        int $remain = ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_estimateRestValue($Context$_tensor_cast(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
        cell $payload = end_cell(store_ref(store_coins(store_ref(__tact_store_address(__tact_store_address(begin_cell(), $msg'new_owner), $msg'response_destination), (null?($msg'custom_payload) ? $global_emptyCell() : __tact_not_null($msg'custom_payload))), $msg'forward_amount), end_cell(store_slice(begin_cell(), $msg'forward_payload))));
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'collection_address, ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_estimateRestValue($Context$_tensor_cast(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw))), 2, false, $GetCardLinkStatus$_store_cell($GetCardLinkStatus$_constructor_query_id_item_index_initiator_payload($msg'query_id, $self'index, $ctx'sender, $payload))));
    }
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

(((slice, int, slice, cell, int, cell, (int, int, slice))), ()) $UNftItem$_internal_binary_ReportCardLinkStatus((slice, int, slice, cell, int, cell, (int, int, slice)) $self, (int, int, int, slice, cell) $msg) impure inline {
    var ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)) = $self;
    var ($msg'query_id, $msg'item_index, $msg'is_linked_to_card, $msg'initiator, $msg'payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(401, ( __tact_slice_eq_bits($self'collection_address, $ctx'sender) ));
    throw_unless(400, (~ null?($msg'is_linked_to_card)));
    throw_unless(400, (~ null?($msg'payload)));
    throw_unless(403, (~ __tact_not_null($msg'is_linked_to_card)));
    int $remain = ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_estimateRestValue($Context$_tensor_cast(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
    ($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination))~$UNftItem$_fun_transfer(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw), $msg'query_id, $msg'payload, $remain);
    return (($self'collection_address, $self'index, $self'owner, $self'individual_content, $self'is_initialized, $self'token_name, ($self'royalty'numerator, $self'royalty'denominator, $self'royalty'destination)), ());
}

;;
;; Get methods of a Contract UNftItem
;;

_ %get_nft_data() method_id(102351) {
    var self = $UNftItem$_contract_load();
    var res = self~$UNftItem$_fun_get_nft_data();
    return $ItemData$_to_external(res);
}

_ %get_token_name() method_id(120838) {
    var self = $UNftItem$_contract_load();
    var res = self~$UNftItem$_fun_get_token_name();
    return res;
}

_ %royalty_params() method_id(85719) {
    var self = $UNftItem$_contract_load();
    var res = self~$UNftItem$_fun_royalty_params();
    return $RoyaltyParams$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmUpJ4XSVpgLZjcwYnAb6NF3zE7vqnMxzKmrNAuAzNH9DH";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract UNftItem
;;

((slice, int, slice, cell, int, cell, (int, int, slice)), int) $UNftItem$_contract_router_internal((slice, int, slice, cell, int, cell, (int, int, slice)) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$UNftItem$_internal_empty();
        return (self, true);
    }
    
    ;; Receive GetStaticData message
    if (op == 2365735669) {
        var msg = in_msg~$GetStaticData$_load();
        self~$UNftItem$_internal_binary_GetStaticData(msg);
        return (self, true);
    }
    
    ;; Receive GetUsernameData message
    if (op == 808469150) {
        var msg = in_msg~$GetUsernameData$_load();
        self~$UNftItem$_internal_binary_GetUsernameData(msg);
        return (self, true);
    }
    
    ;; Receive Transfer message
    if (op == 1312029976) {
        var msg = in_msg~$Transfer$_load();
        self~$UNftItem$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive ReportCardLinkStatus message
    if (op == 1646771514) {
        var msg = in_msg~$ReportCardLinkStatus$_load();
        self~$UNftItem$_internal_binary_ReportCardLinkStatus(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $UNftItem$_contract_load();
    
    ;; Handle operation
    int handled = self~$UNftItem$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $UNftItem$_contract_store(self);
}
